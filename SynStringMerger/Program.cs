using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Strings;
using Noggog;
using System.Text;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Cache.Internals.Implementations;
using Mutagen.Bethesda.Plugins.Records;
using System.Text.RegularExpressions;
using Mutagen.Bethesda.Plugins;
using System.IO;

namespace SynStringMerger;

public class Program
{
    static Program()
    {
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        win1252Encoding = Encoding.GetEncoding(1252);
    }
    static Lazy<Settings> settings = null!;
    static Settings Settings => settings!.Value;
    static Encoding UnicodeEncoding = Encoding.Unicode;
    static Encoding utf8Encoding = Encoding.UTF8;
    static Encoding win1252Encoding = null!;
    private static Regex isFullEnglish = new Regex(@"^[\x00-\x7F]+$", RegexOptions.Compiled);
    private static Regex isFullUpperCamelCase = new Regex(@"^([A-Z]+[a-z0-9]+){2,}$", RegexOptions.Compiled);

    public static async Task<int> Main(string[] args)
    {
        return await SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings("Settings", "SynStringMerger.json", out settings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "SynStringMerger.esp")
            .Run(args);
    }

    public static void Patch<TCache, TTarget>(
        ImmutableLoadOrderLinkCache<ISkyrimMod, ISkyrimModGetter> cache,
        ImmutableLoadOrderLinkCache<ISkyrimMod, ISkyrimModGetter> highPriorityCache,
        IEnumerable<TCache> sourceModEntities,
        IGroup<TTarget> patchedModsEntities,
        string keyWord,
        Action<TTarget, TCache>? action = null)
        where TCache : class, IMajorRecordGetter, ITranslatedNamedGetter
        where TTarget : class, IMajorRecordInternal, ITranslatedNamed, TCache
    {
        int i = 0;
        // 遍历 FormList
        foreach (var winningRecord in Settings.PatchAllRecords ? sourceModEntities : patchedModsEntities)
        {
            FormKey formKey = winningRecord.FormKey;

            var resolveResult = highPriorityCache.TryResolve<TCache>(formKey, out var resolvedRecord, ResolveTarget.Winner);
            if (!resolveResult)
            {
                resolveResult = cache.TryResolve<TCache>(formKey, out resolvedRecord, Settings.ResolveFromOrigin ? ResolveTarget.Origin : ResolveTarget.Winner);
            }
            if (Settings.Verbose)
            {
                Console.Write($"[{keyWord}] EditorId:'{winningRecord.EditorID}', FormId:'{formKey.IDString()}' ");
            }
            var resolvedString = resolvedRecord?.Name?.String;
            // 获取字符串失败
            if (!resolveResult || resolvedString is null)
            {
                Console.WriteLine($"Resolving {formKey} from {(Settings.ResolveFromOrigin ? "Origin" : "Winner")} Failed");
                continue;
            }
            resolvedString = Settings.CustomDictionary.ContainsKey(resolvedString)
                ? Settings.CustomDictionary[resolvedString] : resolvedString;

            //空字符串，跳过
            if (string.IsNullOrEmpty(resolvedString))
            {
                Console.WriteLine("Skipped (Is Null Or Empty)");
                continue;
            }
            // 大驼峰，跳过
            if (isFullUpperCamelCase.IsMatch(resolvedString))
            {
                Console.WriteLine($"///{resolvedString}/// Skipped (Camel Case)");
                continue;
            }
            // 字符串相同
            if (Settings.SkipSameString && resolvedString.Equals(winningRecord.Name?.String))
            {
                Console.Write($"Same String({!Settings.DontSkipFullEnglish},{!isFullEnglish.IsMatch(resolvedString)}): ");
                if (!Settings.DontSkipFullEnglish || !isFullEnglish.IsMatch(resolvedString))
                {
                    Console.WriteLine($" ///{resolvedString}/// Skipped (Same String)");
                    continue;
                }
            }

            var patchRecord = patchedModsEntities.GetOrAddAsOverride(winningRecord);
            if (patchRecord?.Name?.String is not null)
            {
                var winningBytesString = string.Join(",", Encoding.UTF8.GetBytes(winningRecord.Name?.String ?? ""));
                var resolvedStringBytesString = string.Join(",", Encoding.UTF8.GetBytes(resolvedString ?? ""));
                if (Settings.Verbose)
                {
                    Console.WriteLine($"{winningRecord.Name} [{winningBytesString}] ==> {resolvedString} [{resolvedStringBytesString}]");
                }
                patchRecord.Name = resolvedString;
                action?.Invoke(patchRecord!, resolvedRecord!);
                i++;
            }
            else if (Settings.Verbose)
            {
                Console.WriteLine("Something is null");
            }
        }
        Console.WriteLine($"Patched {i} records`");
    }

    public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {
        FileStream filestream = new FileStream("out.txt", FileMode.Create);
        var streamwriter = new StreamWriter(filestream);
        streamwriter.AutoFlush = true;
        Console.SetOut(streamwriter);
        Console.SetError(streamwriter);

        var highPriorityCache = state.LoadOrder.ListedOrder
            .Where(x => Settings.HighPriorityMods.Contains(x.ModKey))
            .OrderBy(x => Settings.HighPriorityMods.IndexOf(x.ModKey))
            .ToImmutableLinkCache();
        var processedCache = state.LoadOrder.ListedOrder
            .SkipLast(1)
            .Where(x =>
            {
                if (x.ModKey.Equals(state.PatchMod.ModKey))
                {
                    return false;
                }
                if (Settings.IgnorePatchMods && x.ModKey.Name.ContainsInsensitive("Patch") && !Settings.IncludedPatchMods.Contains(x.ModKey))
                {
                    return false;
                }
                return Settings.WhiteListMode ? Settings.WhiteList.Contains(x.ModKey) : !Settings.BlackList.Contains(x.ModKey);
            })
            .ToImmutableLinkCache();

        foreach (var cellContext in state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(processedCache))
        {
            if (!cellContext.TryGetParentSimpleContext<ICellSubBlockGetter>(out var subBlockContext))
            {
                continue;
            }
            var cellSubBlockRecord = subBlockContext.Record;

            if (!cellContext.TryGetParentSimpleContext<ICellBlockGetter>(out var blockContext))
            {
                continue;
            }
            var cellRecord = cellContext.Record;

            bool resolveSuccess = highPriorityCache.TryResolve<ICellGetter>(cellContext.Record.FormKey, out var nameSourceRecord, ResolveTarget.Winner);
            if (!resolveSuccess)
            {
                resolveSuccess = processedCache.TryResolve<ICellGetter>(cellContext.Record.FormKey, out nameSourceRecord, Settings.ResolveFromOrigin ? ResolveTarget.Origin : ResolveTarget.Winner);
            }

            Console.Write($"[Cell] FormKey:'{cellRecord.FormKey.ID}' EditorId:'{cellRecord.EditorID}'");

            if (!resolveSuccess || nameSourceRecord == null)
            {
                Console.WriteLine($"Resolve {cellRecord.FormKey} from {(Settings.ResolveFromOrigin ? "Origin" : "Winner")} Failed");
                continue;
            }

            var cellBlockRecord = blockContext.Record;
            Console.Write($"Cell({cellBlockRecord.BlockNumber}, {cellSubBlockRecord.BlockNumber}): {cellRecord.Name}");

            string? resolvedString = nameSourceRecord.Name?.String;

            // 字符串是空的
            if (string.IsNullOrEmpty(resolvedString))
            {
                Console.WriteLine("Skip ~ Null or Empty");
                continue;
            }

            ICell patchingRecord = cellContext.GetOrAddAsOverride(state.PatchMod);

            // 字符串相同
            if (Settings.SkipSameString && resolvedString.Equals(patchingRecord.Name?.String))
            {
                Console.Write($"Same String({!Settings.DontSkipFullEnglish},{!isFullEnglish.IsMatch(resolvedString)}): ");
                if (!Settings.DontSkipFullEnglish || !isFullEnglish.IsMatch(resolvedString))
                {
                    Console.WriteLine($" ///{resolvedString}/// Skipped (Same String)");
                    continue;
                }
            }

            if (cellRecord?.Name != null)
            {
                Console.WriteLine($"{patchingRecord.Name} => {resolvedString}");
                patchingRecord.Name?.Set(Language.English, resolvedString);
            }
        }

        if (Settings.Npc)
        {
            Console.WriteLine();
            Console.WriteLine("==================================");
            Console.WriteLine("========== Patching NPC ==========");
            Console.WriteLine("==================================");

            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Npc().WinningOverrides(), state.PatchMod.Npcs, "NPC", (target, cache) =>
            {
                if (cache.ShortName != null)
                {
                    target.ShortName = cache.ShortName.String;
                }
            });
        }

        if (Settings.Weapon)
        {
            Console.WriteLine();
            Console.WriteLine("=====================================");
            Console.WriteLine("========== Patching Weapon ==========");
            Console.WriteLine("=====================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Weapon().WinningOverrides(), state.PatchMod.Weapons, "Weapon");
        }

        if (Settings.Armor)
        {
            Console.WriteLine();
            Console.WriteLine("====================================");
            Console.WriteLine("========== Patching Armor ==========");
            Console.WriteLine("====================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Armor().WinningOverrides(), state.PatchMod.Armors, "Armor", (target, cache) =>
            {
                target.Description?.Set(Language.English, cache.Description?.String);
            });
        }

        if (Settings.Item)
        {
            Console.WriteLine();
            Console.WriteLine("===================================");
            Console.WriteLine("========== Patching Item ==========");
            Console.WriteLine("===================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.MiscItem().WinningOverrides(), state.PatchMod.MiscItems, "Item");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.SoulGem().WinningOverrides(), state.PatchMod.SoulGems, "SoulGems");
        }

        if (Settings.WorldSpace)
        {
            Console.WriteLine();
            Console.WriteLine("==============================================");
            Console.WriteLine("========== Patching WorldSpace/Cell ==========");
            Console.WriteLine("==============================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Worldspace().WinningOverrides(), state.PatchMod.Worldspaces, "WorldSpace");
            IEnumerable<ICellGetter> cellGetters = state.LoadOrder.PriorityOrder.Cell().WinningOverrides();
            var cellSubBlocks = state.PatchMod.Cells.SelectMany(x => x.SubBlocks);
            var cells = cellSubBlocks.SelectMany(x => x.Cells);
        }

        if (Settings.Perk)
        {
            Console.WriteLine();
            Console.WriteLine("===================================");
            Console.WriteLine("========== Patching Perk ==========");
            Console.WriteLine("===================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Perk().WinningOverrides(), state.PatchMod.Perks, "Perk", (target, cache) =>
            {
                target.Description.Set(cache.Description.TargetLanguage, cache.Description.String);
            });
            var test = state.PatchMod.TryGetTopLevelGroup<Cell>();
        }

        if (Settings.Books)
        {
            Console.WriteLine();
            Console.WriteLine("====================================");
            Console.WriteLine("========== Patching Books ==========");
            Console.WriteLine("====================================");
            Patch(processedCache, highPriorityCache, state.LoadOrder.PriorityOrder.Book().WinningOverrides(), state.PatchMod.Books, "Books", (target, cache) =>
            {
                target.BookText.Set(cache.BookText.TargetLanguage, cache.BookText.String);
            });
        }
    }
}
